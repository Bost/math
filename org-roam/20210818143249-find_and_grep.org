:PROPERTIES:
:ID:       431e4840-0371-470b-9910-d763e9e3c6f1
:END:
#+title: Find and Grep

#+BEGIN_SRC fish :results output
  # redirect; skip the "Permission denied" and "Invalid argument" errors
  find ./ -name file.ext 2>&1 | grep -v "Permission denied\|Invalid argument"
  # see also psub
#+END_SRC

#+BEGIN_SRC bash :results output
  # bash: find: redirect: separate / combine sdterr and stdout; does not work with
  # the tee command
  ./cmd.sh 1>std.out 2>std.err / ./cmd.sh &>combined.out

  # emacs find - exclude backup files; '+' in the '--exec ... +' - the command is
  # built by appending each selected file name at the end
  find . -type f ! -name "*~" -exec grep -n --with-filename --regexp="Pattern" {} +

  # find and delete empty files / dirs
  find . -empty -type f -delete
  find . -empty -tspe d -delete
  find  /path/to/dest -type f -empty -user vivek

  # search for *fileToSearch* in multiple directories
  find ./ foo/ bar/ -name "*fileToSearch*"

  # TODO what does the `-print` switch?
  find . -name '*.properties' -exec grep -lir ".*Pattern.*" '{}' \; -print

  # find only filenames matching '*.clj' containing 'project'
  find . -name '*.clj' -exec grep -il 'project' '{}' \;
  find . -name '*.clj' | xargs grep -l 'project'

  # quit / stop search after finding 1st match
  find . ... -print -quit

  # find all files and dirs modified in the last 7 days; between: older: newer:
  find . ... -mtime -7

  # flatteb all xml files from all src subdirs to dst, fork off a new copy
  # process for every file; TODO test it!
  find ./src -iname '*.xml' -exec cp \\{\\} ./dst \\;

  # skip / exclude / do not search
  find . -not -path "*/\.*"  # hidden files and dirs
  find . -not -path "*path/to/exclude*"

  # files filtered by multiple extensions
  find . -type f -name "*.xml" -or -name "*.txt"
  find . -executable -type f
  find . -type d -name "dirname" # directories called dirname

  # grep from a string
  txt ="Some text where the search is done"                    # bash
  grep --only-matching -e "[-+]\?[0-9]*\.\?[0-9]\+" <<< ${cmd} # bash

  # find: recursive search for "Pattern" in ... (with '.' at the end)
  grep -nir "Pattern" --exclude-dir={.git,CVS} --include=\*.{el,clj,cljs,cljc} ./

  # find: grep-help: recursive search for "Pattern" in ... (with '.' at the end)
  grep -nir "Pattern" --exclude-dir={.git,CVS} --include=\*.{log,propeties,cfg,txt} ./

  # build and execute command lines from standard input
  xargs

  # search in *.txt files (with spaces in filenames)
  find ./ -type f -name "*.txt" -print0 | xargs -0 grep --files-with-matches "Pattern"

  # find and delete *.jar and *.class when idling
  ionice -c3 find . -name "*.jar" -or -name "*.class" -delete

  # search for File.class in jar files
  find . -name "*.jar" | xargs grep File.class

  # new line separator for each grep result sh script
  grep "pattern" /path/to/file | awk '{print $0,"\n"}'

  # grep: colorize grep in less
  grep --color=always pattern file | less -R

  # grep: lines containing any upper character
  grep "[[:upper:]]" file

  # grep: intersection between two files
  grep -Fx -f file1 file2

  # grep: search for "Pattern" and print 2/4 lines before/after matching line
  grep -B 2 -A 4 "Pattern"
  grep --before-context=2 --after-context=4 "Pattern"

  # grep: print only filenames of the files containing "Pattern"
  grep "Pattern" * | cut -f1 -d:

  # zgrep: search possibly compressed files for a regular expression
  zgrep "Pattern" myfile.gz / zgrep 'GET /blog' access_log.gz

  # find images
  find . -type f -exec file {} \; | grep --only-matching --perl-regexp '^.+: \w+ image'

  # between: older: newer:
  find ~/Pictures -type f -newer
  find ~/Pictures -type f -not -newermt "2016-02-01"

  # find all files recursively newer than given time
  find /directory -newermt $(date +%Y-%m-%d -d '1 day ago') -type f -print

  # substitute / replace all occurences of ... with ...
  find ./ -type f -name "*.fish" -print0 | xargs -0 sed --in-place "s/apt-get/apt/g"

  # skip the "Permission denied" and "Invalid argument" errors
  find ./ -name file.ext 2>&1 | grep -v "Permission denied\|Invalid argument"

  #  recursively count LOC (lines of code) in all source files (python & sql)
  find ./ -name "*.py" -or -name "*.sql" | xargs wc -l

  # search for IPv4 addresses
  grep -nir -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" --exclude-dir={.git} --include=\*.{el,clj,cljs,cljc,py,md} ./

  # match integer / floating point number
  echo "aaa 123 0.0 bbb" | grep --only-matching '\([[:digit:]]*\.[[:digit:]]*\|[[:digit:]]*\)'

  # grep
  # \Z  matches the EOF end-of-file

  # https://www.putorius.net/linux-find-command.html
  # Listing Matched Files with Find Command
  find . -type f -iname "my*" -ls

  # Save output to a file
  find ~/test/ -type f -fprint output.txt

  # Run / Execute any command on each matched file from the find command.
  # e.g. find all regular files in the ~/test/ and copy them into the /var/tmp/
  # {} - placeholder where the results of the find command are put
  # \; - denotes the end of command
  find ~/test/ -type f -exec cp -v {} /var/tmp/ \;
  # see also https://www.baeldung.com/linux/find-exec-command

  # -execdir runs the command from the subdirectory of the matched file.
  find ~/test/ -maxdepth 1 -type f -execdir cp -v {} mydir/ \;

  # Prompt for Approval Before Executing Commands
  find ~/test/ -type f -ok rm -v {} \;

  # find files with extension; fdfind is aliased to `f`
  fdfind -e rkt
  find -name "*.rkt"

  # ripgrep
  rg --type racket  --word-regexp SearchText
  rg --type clojure --word-regexp SearchText
  rg -t racket  --word-regexp SearchText
  rg -t clojure --word-regexp SearchText

  # fish-shell, ripgrep and sed the stream editor
  # fish-shell arrays start with 1
  set oldNew "oldText" "newText"
  set sFiles (rg --files-with-matches --type racket $oldNew[1])
  sed --in-place "s/$oldNew[1]/$oldNew[2]/g" $sFiles
#+END_SRC

:PROPERTIES:
:ID:       75f1ffd3-07cd-404f-9c49-a2a966d0ea55
:END:
#+title: Guile Scripting

https://www.gnu.org/software/guile/manual/html_node/Guile-Scripting.html

On Guix (see `which guile`):

#+BEGIN_SRC scheme
#!/run/current-system/profile/bin/guile -s
!#

(write (cdr (command-line)))
(newline)

;; `format` is from (use-modules (ice-9 format))
;; Read environment variable and print it:
;; ~a outputs an argument like `display`
(format #t "~a\n" (getenv "HOME"))
;; ~a outputs an argument like `write`
(format #t "~s\n" (getenv "HOME"))


;; https://www.draketo.de/software/guile-capture-stdout-stderr.html
(use-modules (ice-9 rdelim)
             (ice-9 popen))
(define (exec command)
"The command must have only one line output. TODO improve it"
  (let* ((port (open-input-pipe command)) ; from (ice-9 rdelim)
         (str  (read-line port))) ; from (ice-9 popen)
    (close-pipe port)
    str))


;; Partial function application.
;; See https://srfi.schemers.org/srfi-26/srfi-26.html
(use-modules (srfi srfi-26))
(map (cut * 2 <>) (1 2 3 4))
#+END_SRC
